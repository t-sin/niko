(lambda (&key (users nil))
  (let ((user-row (lambda (id github-name github-id slack-name slack-id channel)
                    <tr>
                      <td>{ id }</td>
                      <td><a href={ (format nil "https://github.com/~a/" github-name) }>{ github-name }</a></td>
                      <td>{ github-id }</td>
                      <td>{ slack-name }</td>
                      <td>{ slack-id }</td>
                      <td>{ channel }</td>
                    </tr>)))
    (flet ((render-row (user)
             (let ((user-id (getf user :id))
                   (github-id (getf user :github-id))
                   (github-name (getf user :github-name))
                   (slack-id (getf user :slack-id))
                   (slack-name (getf user :slack-name))
                   (channel (getf user :channel)))
               (lsx:render-object (funcall user-row user-id github-name github-id slack-name slack-id channel)
                                  nil))))
<div id="main">

  <h1>Users in Niko's inventory</h1>

  <blockquote>
    <quote>lightbulb</quote>: A large lightbulb. It's the sun.
  </blockquote>

  <table>
    <tr>
      <th>id</th>
      <th>github-name</th>
      <th>github-id</th>
      <th>slack-name</th>
      <th>slack-id</th>
      <th>channel</th>
    </tr>
    {(loop :for user :in users :collect (render-row user))}
  </table>

  <hr />

  <a href="/">index</a>

</div>)))

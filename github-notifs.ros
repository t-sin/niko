#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:dexador :jonathan) :silent t)
  )

(defpackage :ros.script.github-notifs.3732696253
  (:use :cl))
(in-package :ros.script.github-notifs.3732696253)

(defparameter *github-token* "your tokens")

(defun get-notifications (token &optional since all)
  (multiple-value-bind (res status header uri ssl)
      (dex:get (format nil "~a?~a"
                       "https://api.github.com/notifications"
                       (quri:url-encode-params `(,(if since
                                                      `("since" . ,since)
                                                      '("since" . ""))
                                                  ,(if all
                                                       `("all" . ,all)
                                                       '("all" . "false")))))
               :headers `(("Authorization" . ,(concatenate 'string "token " token))))
    (declare (ignore status ssl))
    (format t "~s~%" uri)
    (values
     (jojo:parse res)
     (gethash "last-modified" header)
     (gethash "x-poll-interval" header))))

;;; 所属するチーム全てのメンションを知りたい
;;; スレッド購読して、新着のメッセージを解析か。
(defun get-mentioned (token &optional since all)
  (multiple-value-bind (notifications last-modified poll-interval)
      (get-notifications token since all)
    (declare (ignorable last-modified poll-interval))
    (loop
       :for n :in notifications
       :when (member (getf n :|reason|) '("author"  ; 自分がauthorのスレッドにコメントきたから
                                          "comment"  ; 自分がスレッドにコメントしたから
                                          "mention"  ; 明示的なメンションされたから
                                          "assign"  ; 割り当てされたとき
                                          "subscribed")  ; スレッド購読してたから
                     :test #'string=)
       :collect (list (getf n :|subject|)
                      (intern (getf n :|reason|) :keyword)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "~s~%" argv)
  (format t "~s~%" (get-mentioned (first argv) (second argv) (third argv))))
;;; vim: set ft=lisp lisp:
